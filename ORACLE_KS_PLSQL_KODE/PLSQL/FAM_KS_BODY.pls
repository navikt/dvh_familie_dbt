CREATE OR REPLACE PACKAGE BODY FAM_KS AS

  PROCEDURE FAM_KS_MOTTAKER_INSERT(
    P_IN_PERIOD_YYYYMM IN NUMBER,
    P_IN_GYLDIG_FLAGG IN NUMBER DEFAULT 0,
    P_ERROR_MELDING OUT VARCHAR2
  ) AS
    V_AAR_START     VARCHAR2(6):= SUBSTR(P_IN_PERIOD_YYYYMM, 1, 4)
                                  || '01';
    V_KILDE         VARCHAR2(10) := 'KS';
 --v_storedate DATE := sysdate;
    L_ERROR_MELDING VARCHAR2(1000);
    V_IN_PERIOD_FRA NUMBER := P_IN_PERIOD_YYYYMM
                              ||'00';
    V_IN_PERIOD_TIL NUMBER := P_IN_PERIOD_YYYYMM
                              ||'32';
    L_COMMIT        NUMBER := 0;
    CURSOR CUR_MOTTAKER IS
      WITH UR_VEDTAK1 AS (
        SELECT
          UR.GJELDER_MOTTAKER,
          UR.FK_PERSON1,
          UR.POSTERINGSDATO,
          UR.DATO_UTBET_FOM,
          UR.DATO_UTBET_TOM,
          UR.DELYTELSE_ID,
          UR.BELOP,
          UR.HENVISNING,
          UTBET_DET.FK_PERSON1_BARN,
          UTBET_DET.DELYTELSE_ID               AS DELYTELSE_ID_DET,
          FAGSAK.BEHANDLINGS_ID,
          FAGSAK.FAGSAK_ID,
          FAGSAK.PK_KS_FAGSAK,
          UTBETALING.STONAD_FOM,
          FAM_KS_PERIODE.SISTE_DATO_I_PERIODEN,
          FAM_KS_PERIODE.PK_DIM_TID
        FROM
          DVH_FAM_KS.FAM_KS_UR_UTBETALING UR
          JOIN DT_KODEVERK.DIM_TID FAM_KS_PERIODE
          ON TO_CHAR(UR.POSTERINGSDATO, 'YYYYMM') = FAM_KS_PERIODE.AAR_MAANED
          AND FAM_KS_PERIODE.DIM_NIVAA = 3
          AND FAM_KS_PERIODE.GYLDIG_FLAGG = 1 LEFT OUTER JOIN DVH_FAM_KS.FAM_KS_UTBET_DET UTBET_DET
          ON UR.DELYTELSE_ID = TO_CHAR(UTBET_DET.DELYTELSE_ID)
          LEFT JOIN DVH_FAM_KS.FAM_KS_UTBETALING UTBETALING
          ON UTBET_DET.FK_KS_UTBETALING = UTBETALING.PK_KS_UTBETALING
          AND UR.DATO_UTBET_FOM >= UTBETALING.STONAD_FOM
          AND UR.DATO_UTBET_TOM <= UTBETALING.STONAD_TOM
          LEFT JOIN DVH_FAM_KS.FAM_KS_FAGSAK FAGSAK
          ON UTBETALING.FK_KS_FAGSAK = FAGSAK.PK_KS_FAGSAK
        WHERE
          UR.FK_DIM_TID_DATO_POSTERT_UR BETWEEN TO_NUMBER(V_IN_PERIOD_FRA) AND TO_NUMBER(V_IN_PERIOD_TIL)
      ), UR_VEDTAK2 AS (
        SELECT
          UR_VEDTAK1.*
        FROM
          UR_VEDTAK1
          JOIN (
            SELECT
              UR_VEDTAK1.DELYTELSE_ID,
              MAX(UR_VEDTAK1.BEHANDLINGS_ID) KEEP (DENSE_RANK FIRST ORDER BY FAGSAK.TIDSPUNKT_VEDTAK DESC) AS SISTE_VERSJON
            FROM
              UR_VEDTAK1
              JOIN DVH_FAM_KS.FAM_KS_FAGSAK FAGSAK
              ON UR_VEDTAK1.FAGSAK_ID = FAGSAK.FAGSAK_ID
              AND TO_CHAR(FAGSAK.TIDSPUNKT_VEDTAK, 'yyyymmdd') <= TO_CHAR(UR_VEDTAK1.POSTERINGSDATO, 'yyyymmdd')
            GROUP BY
              UR_VEDTAK1.DELYTELSE_ID
          ) SISTE
          ON UR_VEDTAK1.DELYTELSE_ID = SISTE.DELYTELSE_ID
          AND UR_VEDTAK1.BEHANDLINGS_ID = SISTE.SISTE_VERSJON
        WHERE
          UR_VEDTAK1.DELYTELSE_ID_DET IS NOT NULL UNION ALL
          SELECT
            *
          FROM
            UR_VEDTAK1
          WHERE
            DELYTELSE_ID_DET IS NULL
      )
      SELECT
        UR.FK_PERSON1,
        MAX(UR.HENVISNING)                                BEHANDLINGS_ID,
        UR.FAGSAK_ID,
        SUM(BELOP)                                        BELOP,
        SUM(
          CASE
            WHEN UR.POSTERINGSDATO BETWEEN UR.DATO_UTBET_FOM AND UR.DATO_UTBET_TOM THEN
              BELOP
            ELSE
              0
          END)                                            BELOPM,
        SUM(
          CASE
            WHEN UR.POSTERINGSDATO > UR.DATO_UTBET_TOM THEN
              BELOP
            ELSE
              0
          END)                                            BELOPE,
        MAX(UR.STONAD_FOM)                                UTBET_FOM,
        MAX(DIM_PERSON_MOTTAKER.PK_DIM_PERSON)            FK_DIM_PERSON,
        MAX(UR.PK_KS_FAGSAK)                              AS FK_KS_FAGSAK,
        EXTRACT( YEAR FROM DIM_PERSON_MOTTAKER.FODT_DATO) FODSEL_AAR,
        TO_CHAR(DIM_PERSON_MOTTAKER.FODT_DATO, 'MM')      FODSEL_MND,
        DIM_KJONN_MOTTAKER.KJONN_KODE                     KJONN,
        DIM_PERSON_MOTTAKER.FK_DIM_KJONN,
        DIM_ALDER.PK_DIM_ALDER                            FK_DIM_ALDER,
        DIM_PERSON_MOTTAKER.FK_DIM_SIVILSTATUS,
        DIM_PERSON_MOTTAKER.FK_DIM_LAND_FODT,
        DIM_PERSON_MOTTAKER.FK_DIM_GEOGRAFI_BOSTED,
        DIM_PERSON_MOTTAKER.FK_DIM_LAND_STATSBORGERSKAP,
        UR.PK_DIM_TID                                     FK_DIM_TID_MND,
        COUNT(DISTINCT UR.FK_PERSON1_BARN)                ANTBARN
      FROM
        UR_VEDTAK2               UR
        LEFT OUTER JOIN DT_PERSON.DIM_PERSON DIM_PERSON_MOTTAKER
        ON DIM_PERSON_MOTTAKER.FK_PERSON1 = UR.GJELDER_MOTTAKER
        AND DIM_PERSON_MOTTAKER.GYLDIG_FRA_DATO <= UR.SISTE_DATO_I_PERIODEN
        AND DIM_PERSON_MOTTAKER.GYLDIG_TIL_DATO >= UR.SISTE_DATO_I_PERIODEN
        LEFT OUTER JOIN DT_KODEVERK.DIM_GEOGRAFI DIM_GEOGRAFI
        ON DIM_PERSON_MOTTAKER.FK_DIM_GEOGRAFI_BOSTED = DIM_GEOGRAFI.PK_DIM_GEOGRAFI
        LEFT OUTER JOIN DT_KODEVERK.DIM_KJONN DIM_KJONN_MOTTAKER
        ON DIM_PERSON_MOTTAKER.FK_DIM_KJONN = DIM_KJONN_MOTTAKER.PK_DIM_KJONN
        LEFT OUTER JOIN DT_KODEVERK.DIM_ALDER
        ON FLOOR(MONTHS_BETWEEN(UR.SISTE_DATO_I_PERIODEN,
        DIM_PERSON_MOTTAKER.FODT_DATO)/12) = DIM_ALDER.ALDER
        AND DIM_ALDER.GYLDIG_FRA_DATO <= UR.SISTE_DATO_I_PERIODEN
        AND DIM_ALDER.GYLDIG_TIL_DATO >= UR.SISTE_DATO_I_PERIODEN
      GROUP BY
        UR.FK_PERSON1 --DATO_UTBET_FOM,DATO_UTBET_TOM,
,
        UR.FAGSAK_ID,
        EXTRACT( YEAR FROM DIM_PERSON_MOTTAKER.FODT_DATO),
        TO_CHAR(DIM_PERSON_MOTTAKER.FODT_DATO,
        'MM'),
        DIM_KJONN_MOTTAKER.KJONN_KODE,
        DIM_PERSON_MOTTAKER.FK_DIM_KJONN,
        DIM_PERSON_MOTTAKER.FK_DIM_SIVILSTATUS,
        DIM_PERSON_MOTTAKER.FK_DIM_LAND_FODT,
        DIM_PERSON_MOTTAKER.FK_DIM_GEOGRAFI_BOSTED,
        DIM_PERSON_MOTTAKER.FK_DIM_LAND_STATSBORGERSKAP,
        UR.PK_DIM_TID,
        DIM_ALDER.PK_DIM_ALDER
      HAVING
        SUM(UR.BELOP) != 0;
  BEGIN
 -- Slett mottakere dvh_fam_fp.fam_bt_mottaker_hist for aktuell periode
    BEGIN
      DELETE FROM DVH_FAM_KS.FAK_FAM_KS_MOTTAKER
      WHERE
        KILDE = V_KILDE
        AND STAT_AARMND = P_IN_PERIOD_YYYYMM
        AND GYLDIG_FLAGG = P_IN_GYLDIG_FLAGG;
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        L_ERROR_MELDING := SUBSTR(SQLCODE
                                  || ' '
                                  || SQLERRM, 1, 1000);
        INSERT INTO DVH_FAM_FP.FP_XML_UTBRETT_ERROR(
          MIN_LASTET_DATO,
          ID,
          ERROR_MSG,
          OPPRETTET_TID,
          KILDE
        ) VALUES(
          NULL,
          NULL,
          L_ERROR_MELDING,
          SYSDATE,
          'FAM_KS_MOTTAKER_INSERT_WITH1'
        );
        COMMIT;
        P_ERROR_MELDING := SUBSTR(P_ERROR_MELDING
                                  || L_ERROR_MELDING, 1, 1000);
        L_ERROR_MELDING := NULL;
    END;
    FOR REC_MOTTAKER IN CUR_MOTTAKER LOOP
 --INSERT INTO dvh_fam_fp.fam_bt_mottaker
      BEGIN
        INSERT INTO DVH_FAM_KS.FAK_FAM_KS_MOTTAKER (
          FK_PERSON1_MOTTAKER,
          STAT_AARMND,
          BELOP,
          BELOPM,
          BELOPE,
          UTBETFOM, --utbet_tom,
          FK_DIM_PERSON,
          FAGSAK_ID,
          FK_KS_FAGSAK,
          BEHANDLINGS_ID,
          FODSEL_AAR,
          FODSEL_MND,
          KJONN,
          FK_DIM_ALDER,
          KILDE,
          FK_DIM_KJONN,
          FK_DIM_TID_MND,
          FK_DIM_GEOGRAFI_BOSTED,
          FK_DIM_LAND_STATSBORGERSKAP,
          LASTET_DATO,
          GYLDIG_FLAGG,
          ANTBARN
        ) VALUES (
          REC_MOTTAKER.FK_PERSON1,
          P_IN_PERIOD_YYYYMM,
          REC_MOTTAKER.BELOP,
          REC_MOTTAKER.BELOPM,
          REC_MOTTAKER.BELOPE,
          REC_MOTTAKER.UTBET_FOM,
 --rec_mottaker.utbet_tom,
          REC_MOTTAKER.FK_DIM_PERSON,
          REC_MOTTAKER.FAGSAK_ID,
          REC_MOTTAKER.FK_KS_FAGSAK,
          REC_MOTTAKER.BEHANDLINGS_ID,
          REC_MOTTAKER.FODSEL_AAR,
          REC_MOTTAKER.FODSEL_MND,
          REC_MOTTAKER.KJONN,
          REC_MOTTAKER.FK_DIM_ALDER,
          V_KILDE,
          REC_MOTTAKER.FK_DIM_KJONN,
          REC_MOTTAKER.FK_DIM_TID_MND,
          REC_MOTTAKER.FK_DIM_GEOGRAFI_BOSTED,
          REC_MOTTAKER.FK_DIM_LAND_STATSBORGERSKAP,
          SYSDATE,
          P_IN_GYLDIG_FLAGG,
          REC_MOTTAKER.ANTBARN
        );
        L_COMMIT := L_COMMIT + 1;
      EXCEPTION
        WHEN OTHERS THEN
          L_ERROR_MELDING := SUBSTR(SQLCODE
                                    || ' '
                                    || SQLERRM, 1, 1000);
          INSERT INTO DVH_FAM_FP.FP_XML_UTBRETT_ERROR(
            MIN_LASTET_DATO,
            ID,
            ERROR_MSG,
            OPPRETTET_TID,
            KILDE
          ) VALUES(
            NULL,
            REC_MOTTAKER.FAGSAK_ID,
            L_ERROR_MELDING,
            SYSDATE,
            'FAM_KS_MOTTAKER_INSERT_WITH2'
          );
          L_COMMIT := L_COMMIT + 1; --GÃ¥ videre til neste rekord
          P_ERROR_MELDING := SUBSTR(P_ERROR_MELDING
                                                                  || L_ERROR_MELDING, 1, 1000);
          L_ERROR_MELDING := NULL;
      END;
      IF L_COMMIT >= 100000 THEN
        COMMIT;
        L_COMMIT := 0;
      END IF;
    END LOOP;
    COMMIT;
    IF L_ERROR_MELDING IS NOT NULL THEN
      INSERT INTO DVH_FAM_FP.FP_XML_UTBRETT_ERROR(
        ID,
        ERROR_MSG,
        OPPRETTET_TID,
        KILDE
      ) VALUES(
        NULL,
        L_ERROR_MELDING,
        SYSDATE,
        'FAM_KS_MOTTAKER_INSERT_WITH3'
      );
      COMMIT;
      P_ERROR_MELDING := SUBSTR(P_ERROR_MELDING
                                || L_ERROR_MELDING, 1, 1000);
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      L_ERROR_MELDING := SUBSTR(SQLCODE
                                || ' '
                                || SQLERRM, 1, 1000);
      INSERT INTO DVH_FAM_FP.FP_XML_UTBRETT_ERROR(
        MIN_LASTET_DATO,
        ID,
        ERROR_MSG,
        OPPRETTET_TID,
        KILDE
      ) VALUES(
        NULL,
        NULL,
        L_ERROR_MELDING,
        SYSDATE,
        'FAM_KS_MOTTAKER_INSERT_WITH4'
      );
      COMMIT;
      P_ERROR_MELDING := SUBSTR(P_ERROR_MELDING
                                || L_ERROR_MELDING, 1, 1000);
  END FAM_KS_MOTTAKER_INSERT;

  PROCEDURE FAM_KS_BARN_INSERT(
    P_IN_PERIOD_YYYYMM IN NUMBER,
    P_IN_GYLDIG_FLAGG IN NUMBER DEFAULT 0,
    P_ERROR_MELDING OUT VARCHAR2
  ) AS
    V_AAR_START     VARCHAR2(6):= SUBSTR(P_IN_PERIOD_YYYYMM, 1, 4)
                                  || '01';
    V_KILDE         VARCHAR2(10) := 'KS';
 --v_storedate DATE := sysdate;
    L_ERROR_MELDING VARCHAR2(1000);
    V_IN_PERIOD_FRA NUMBER := P_IN_PERIOD_YYYYMM
                              ||'00';
    V_IN_PERIOD_TIL NUMBER := P_IN_PERIOD_YYYYMM
                              ||'32';
    L_COMMIT        NUMBER := 0;
    CURSOR CUR_BARN IS
      WITH UR_VEDTAK1 AS (
        SELECT
          UR.GJELDER_MOTTAKER,
          UR.FK_PERSON1,
          UR.POSTERINGSDATO,
          UR.DATO_UTBET_FOM,
          UR.DATO_UTBET_TOM,
          UR.DELYTELSE_ID,
          UR.BELOP,
          UR.HENVISNING,
          UTBET_DET.FK_PERSON1_BARN,
          UTBET_DET.DELYTELSE_ID               AS DELYTELSE_ID_DET,
          FAGSAK.BEHANDLINGS_ID,
          FAGSAK.FAGSAK_ID,
          FAGSAK.PK_KS_FAGSAK,
          UTBETALING.STONAD_FOM,
          UTBETALING.FK_KS_FAGSAK,
          FAM_KS_PERIODE.SISTE_DATO_I_PERIODEN,
          FAM_KS_PERIODE.PK_DIM_TID            AS FK_DIM_TID_MND,
          FAM_KS_PERIODE.AAR_MAANED            STAT_AARMND,
          VILKAAR.ANTALL_TIMER
        FROM
          DVH_FAM_KS.FAM_KS_UR_UTBETALING    UR
          JOIN DT_KODEVERK.DIM_TID FAM_KS_PERIODE
          ON TO_CHAR(UR.POSTERINGSDATO, 'YYYYMM') = FAM_KS_PERIODE.AAR_MAANED
          AND FAM_KS_PERIODE.DIM_NIVAA = 3
          AND FAM_KS_PERIODE.GYLDIG_FLAGG = 1 LEFT OUTER JOIN DVH_FAM_KS.FAM_KS_UTBET_DET UTBET_DET
          ON UR.DELYTELSE_ID = TO_CHAR(UTBET_DET.DELYTELSE_ID)
          LEFT JOIN DVH_FAM_KS.FAM_KS_UTBETALING UTBETALING
          ON UTBET_DET.FK_KS_UTBETALING = UTBETALING.PK_KS_UTBETALING
          AND UR.DATO_UTBET_FOM >= UTBETALING.STONAD_FOM
          AND UR.DATO_UTBET_TOM <= UTBETALING.STONAD_TOM
          LEFT JOIN DVH_FAM_KS.FAM_KS_FAGSAK FAGSAK
          ON UTBETALING.FK_KS_FAGSAK = FAGSAK.PK_KS_FAGSAK
          LEFT JOIN DVH_FAM_KS.FAM_KS_VILKAAR_RESULTAT VILKAAR
          ON UTBETALING.FK_KS_FAGSAK = VILKAAR.FK_KS_FAGSAK
          AND UTBET_DET.FK_PERSON1_BARN = VILKAAR.FK_PERSON1
 --and vilkaar.periode_fom between utbetaling.stonad_fom and utbetaling.stonad_tom
 --and utbetaling.stonad_fom >= vilkaar.periode_fom
          AND UTBETALING.STONAD_TOM >= VILKAAR.PERIODE_FOM
          AND UTBETALING.STONAD_TOM <= NVL(VILKAAR.PERIODE_TOM,
          UTBETALING.STONAD_TOM)
          AND VILKAAR.VILKAAR_TYPE = 'BARNEHAGEPLASS'
        WHERE
          UR.FK_DIM_TID_DATO_POSTERT_UR BETWEEN TO_NUMBER(V_IN_PERIOD_FRA) AND TO_NUMBER(V_IN_PERIOD_TIL)
      ), UR_VEDTAK2 AS (
        SELECT
          UR_VEDTAK1.*
        FROM
          UR_VEDTAK1
          JOIN (
            SELECT
              UR_VEDTAK1.DELYTELSE_ID,
              MAX(UR_VEDTAK1.BEHANDLINGS_ID) KEEP (DENSE_RANK FIRST ORDER BY FAGSAK.TIDSPUNKT_VEDTAK DESC) AS SISTE_VERSJON
            FROM
              UR_VEDTAK1
              JOIN DVH_FAM_KS.FAM_KS_FAGSAK FAGSAK
              ON UR_VEDTAK1.FAGSAK_ID = FAGSAK.FAGSAK_ID
              AND TO_CHAR(FAGSAK.TIDSPUNKT_VEDTAK, 'yyyymmdd') <= TO_CHAR(UR_VEDTAK1.POSTERINGSDATO, 'yyyymmdd')
            GROUP BY
              UR_VEDTAK1.DELYTELSE_ID
          ) SISTE
          ON UR_VEDTAK1.DELYTELSE_ID = SISTE.DELYTELSE_ID
          AND UR_VEDTAK1.BEHANDLINGS_ID = SISTE.SISTE_VERSJON
        WHERE
          UR_VEDTAK1.DELYTELSE_ID_DET IS NOT NULL UNION ALL
          SELECT
            *
          FROM
            UR_VEDTAK1
          WHERE
            DELYTELSE_ID_DET IS NULL
      )
      SELECT
        UR.FK_PERSON1                                      FK_PERSON1_MOTTAKER,
        DIM_PERSON_MOTTAKER.PK_DIM_PERSON,
        DIM_KJONN_MOTTAKER.KJONN_KODE                      KJONN,
        DIM_KJONN_MOTTAKER.PK_DIM_KJONN                    FK_DIM_KJONN,
        UR.FK_PERSON1_BARN,
        DIM_PERSON_BARN.PK_DIM_PERSON                      FK_DIM_PERSON_BARN,
        UR.FAGSAK_ID,
        MAX(UR.FK_KS_FAGSAK)                               AS FK_KS_FAGSAK,
        DIM_KJONN_BARN.KJONN_KODE                          KJONN_BARN,
        DIM_KJONN_BARN.PK_DIM_KJONN                        FK_DIM_KJONN_BARN,
        SUM(UR.BELOP)                                      BELOP,
        UR.STAT_AARMND,
        EXTRACT( YEAR FROM DIM_PERSON_MOTTAKER.FODT_DATO) FODSEL_AAR,
        EXTRACT (MONTH FROM DIM_PERSON_MOTTAKER.FODT_DATO) FODSEL_MND,
        EXTRACT( YEAR FROM DIM_PERSON_BARN.FODT_DATO)      FODSEL_AAR_BARN,
        EXTRACT (MONTH FROM DIM_PERSON_BARN.FODT_DATO)     FODSEL_MND_BARN,
        UR.FK_DIM_TID_MND,
        MAX(UR.ANTALL_TIMER)                               AS ANTALL_TIMER,
        MIN(UR.DATO_UTBET_FOM)                             AS DATO_UTBET_FOM,
        MAX(UR.DATO_UTBET_TOM)                             AS DATO_UTBET_TOM
      FROM
        UR_VEDTAK2            UR
        JOIN DT_PERSON.DIM_PERSON DIM_PERSON_MOTTAKER
        ON DIM_PERSON_MOTTAKER.FK_PERSON1 = UR.FK_PERSON1
        AND DIM_PERSON_MOTTAKER.GYLDIG_FRA_DATO <= UR.SISTE_DATO_I_PERIODEN
        AND DIM_PERSON_MOTTAKER.GYLDIG_TIL_DATO >= UR.SISTE_DATO_I_PERIODEN LEFT OUTER JOIN DT_KODEVERK.DIM_KJONN DIM_KJONN_MOTTAKER
        ON DIM_PERSON_MOTTAKER.FK_DIM_KJONN = DIM_KJONN_MOTTAKER.PK_DIM_KJONN
        LEFT OUTER JOIN DT_PERSON.DIM_PERSON DIM_PERSON_BARN
        ON DIM_PERSON_BARN.FK_PERSON1 = UR.FK_PERSON1_BARN
        AND DIM_PERSON_BARN.GYLDIG_FRA_DATO <= UR.SISTE_DATO_I_PERIODEN
        AND DIM_PERSON_BARN.GYLDIG_TIL_DATO >= UR.SISTE_DATO_I_PERIODEN
        LEFT OUTER JOIN DT_KODEVERK.DIM_KJONN DIM_KJONN_BARN
        ON DIM_PERSON_BARN.FK_DIM_KJONN = DIM_KJONN_BARN.PK_DIM_KJONN
      GROUP BY
        UR.FK_PERSON1,
        DIM_PERSON_MOTTAKER.PK_DIM_PERSON,
        DIM_KJONN_MOTTAKER.KJONN_KODE,
        DIM_KJONN_MOTTAKER.PK_DIM_KJONN,
        UR.FK_PERSON1_BARN,
        DIM_PERSON_BARN.PK_DIM_PERSON,
        UR.STAT_AARMND,
        UR.FAGSAK_ID,
 --ur.fk_ks_fagsak,
        DIM_KJONN_BARN.KJONN_KODE,
        EXTRACT( YEAR FROM DIM_PERSON_MOTTAKER.FODT_DATO),
        EXTRACT(MONTH FROM DIM_PERSON_MOTTAKER.FODT_DATO),
        EXTRACT( YEAR FROM DIM_PERSON_MOTTAKER.FODT_DATO),
        EXTRACT (MONTH FROM DIM_PERSON_MOTTAKER.FODT_DATO),
        EXTRACT( YEAR FROM DIM_PERSON_BARN.FODT_DATO),
        EXTRACT (MONTH FROM DIM_PERSON_BARN.FODT_DATO),
        DIM_KJONN_BARN.PK_DIM_KJONN,
        UR.FK_DIM_TID_MND,
        DIM_KJONN_BARN.PK_DIM_KJONN
      HAVING
        SUM(UR.BELOP) != 0
 --having sum(case when ur.posteringsdato between ur.dato_utbet_fom and ur.dato_utbet_tom then belop else 0 end) > 0
;
  BEGIN
 -- Slett mottakere dvh_fam_fp.fam_bt_mottaker_hist for aktuell periode
    BEGIN
      DELETE FROM DVH_FAM_KS.FAM_KS_BARN
      WHERE
        KILDE = V_KILDE
        AND STAT_AARMND = P_IN_PERIOD_YYYYMM
        AND GYLDIG_FLAGG = P_IN_GYLDIG_FLAGG;
      COMMIT;
    EXCEPTION
      WHEN OTHERS THEN
        L_ERROR_MELDING := SUBSTR(SQLCODE
                                  || ' '
                                  || SQLERRM, 1, 1000);
        INSERT INTO DVH_FAM_FP.FP_XML_UTBRETT_ERROR(
          MIN_LASTET_DATO,
          ID,
          ERROR_MSG,
          OPPRETTET_TID,
          KILDE
        ) VALUES(
          NULL,
          NULL,
          L_ERROR_MELDING,
          SYSDATE,
          'FAM_KS_BARN_INSERT_WITH1'
        );
        COMMIT;
        P_ERROR_MELDING := SUBSTR(P_ERROR_MELDING
                                  || L_ERROR_MELDING, 1, 1000);
        L_ERROR_MELDING := NULL;
    END;
    FOR REC_BARN IN CUR_BARN LOOP
 --INSERT INTO dvh_fam_fp.fam_bt_mottaker
      BEGIN
        INSERT INTO DVH_FAM_KS.FAM_KS_BARN (
          STAT_AARMND,
          FK_DIM_TID_MND,
          FK_PERSON1_MOTTAKER,
 --  fk_dim_person,
          FK_DIM_KJONN,
          FODSEL_AAR,
          FODSEL_MND,
          KJONN,
          FK_PERSON1_BARN,
          FK_DIM_PERSON_BARN,
          KJONN_BARN,
          FK_DIM_KJONN_BARN,
          FODSEL_AAR_BARN,
          FODSEL_MND_BARN,
          FAGSAK_ID,
          FK_KS_FAGSAK,
          KILDE,
          LASTET_DATO,
          GYLDIG_FLAGG,
          ANTALL_TIMER,
          DATO_UTBET_FOM,
          DATO_UTBET_TOM
        ) VALUES (
          P_IN_PERIOD_YYYYMM,
          REC_BARN.FK_DIM_TID_MND,
          REC_BARN.FK_PERSON1_MOTTAKER,
 --  rec_barn.fk_dim_person_mottaker,
 -- rec_barn.fk_dim_person,
          REC_BARN.FK_DIM_KJONN,
          REC_BARN.FODSEL_AAR,
          REC_BARN.FODSEL_MND,
          REC_BARN.KJONN,
          REC_BARN.FK_PERSON1_BARN,
          REC_BARN.FK_DIM_PERSON_BARN,
          REC_BARN.KJONN_BARN,
          REC_BARN.FK_DIM_KJONN_BARN,
          REC_BARN.FODSEL_AAR_BARN,
          REC_BARN.FODSEL_MND_BARN,
          REC_BARN.FAGSAK_ID,
          REC_BARN.FK_KS_FAGSAK,
          V_KILDE,
          SYSDATE,
          P_IN_GYLDIG_FLAGG,
          REC_BARN.ANTALL_TIMER,
          REC_BARN.DATO_UTBET_FOM,
          REC_BARN.DATO_UTBET_TOM
        );
        L_COMMIT := L_COMMIT + 1;
      EXCEPTION
        WHEN OTHERS THEN
          L_ERROR_MELDING := SUBSTR(SQLCODE
                                    || ' '
                                    || SQLERRM, 1, 1000);
          INSERT INTO DVH_FAM_FP.FP_XML_UTBRETT_ERROR(
            MIN_LASTET_DATO,
            ID,
            ERROR_MSG,
            OPPRETTET_TID,
            KILDE
          ) VALUES(
            NULL,
            REC_BARN.FAGSAK_ID,
            L_ERROR_MELDING,
            SYSDATE,
            'FAM_KS_BARN_INSERT_WITH2'
          );
          L_COMMIT := L_COMMIT + 1; --GÃ¥ videre til neste rekord
          P_ERROR_MELDING := SUBSTR(P_ERROR_MELDING
                                                                  || L_ERROR_MELDING, 1, 1000);
          L_ERROR_MELDING := NULL;
      END;
      IF L_COMMIT >= 100000 THEN
        COMMIT;
        L_COMMIT := 0;
      END IF;
    END LOOP;
    COMMIT;
    IF L_ERROR_MELDING IS NOT NULL THEN
      INSERT INTO DVH_FAM_FP.FP_XML_UTBRETT_ERROR(
        ID,
        ERROR_MSG,
        OPPRETTET_TID,
        KILDE
      ) VALUES(
        NULL,
        L_ERROR_MELDING,
        SYSDATE,
        'FAM_KS_BARN_INSERT_WITH3'
      );
      COMMIT;
      P_ERROR_MELDING := SUBSTR(P_ERROR_MELDING
                                || L_ERROR_MELDING, 1, 1000);
    END IF;
  EXCEPTION
    WHEN OTHERS THEN
      L_ERROR_MELDING := SUBSTR(SQLCODE
                                || ' '
                                || SQLERRM, 1, 1000);
      INSERT INTO DVH_FAM_FP.FP_XML_UTBRETT_ERROR(
        MIN_LASTET_DATO,
        ID,
        ERROR_MSG,
        OPPRETTET_TID,
        KILDE
      ) VALUES(
        NULL,
        NULL,
        L_ERROR_MELDING,
        SYSDATE,
        'FAM_KS_BARN_INSERT_WITH4'
      );
      COMMIT;
      P_ERROR_MELDING := SUBSTR(P_ERROR_MELDING
                                || L_ERROR_MELDING, 1, 1000);
  END FAM_KS_BARN_INSERT;
END FAM_KS;